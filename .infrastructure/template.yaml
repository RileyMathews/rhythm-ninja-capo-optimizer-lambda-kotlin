Resources:

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: rhythm-ninja-capo-optimizer-lambda-kotlin
      Description: capo optimizer core logic in a lambda
      Handler: com.rileymathews.App::handleRequest
      MemorySize: 128
      Role: !GetAtt LambdaFunctionExecutionRole.Arn
      Runtime: java11
      Code:
        S3Bucket: lambda-placeholder-code
        S3Key: java.jar

  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: rhythm-ninja-capo-optimizer-lambda-kotlin-api
      ProtocolType: HTTP
      Target: !GetAtt LambdaFunction.Arn
      CredentialsArn: !GetAtt ApiGatewayPermissionToExecuteLambda.Arn

  ApiGatewayPermissionToExecuteLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaAPIServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyName: AllowApiGatewayToTriggerLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: lambda:InvokeFunction
            Resource: !GetAtt LambdaFunction.Arn
            Effect: Allow
